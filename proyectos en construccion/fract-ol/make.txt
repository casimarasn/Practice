NAME = fractol
INCLUDE = fractol.h
AR = ar rcs
CC = cc
CFLAGS = -Wall -Wextra -Werror -I. -Ilibft -Ift_printf
RM = rm -rf

OBJDIR = obj

#librarys
LIBFT_DIR = libft
LIBFT = $(LIBFT_DIR)/libft.a

PRINTF_DIR = printf
PRINTF = $(PRINTF_DIR)/libftprintf.a

FILES =


OBJS = $(addprefix $(OBJDIR)/, $(FILES:%.c=%.o))
DEPS = $(OBJS:.o=.d)

all: $(NAME)

$(OBJDIR)/%.o: %.c $(INCLUDE)
	@mkdir -p $(OBJDIR)
	@echo "ðŸ›  Compiling $<..."
	@$(CC) $(CFLAGS) -MMD -MP -c $< -o $@

$(NAME): $(OBJS) $(LIBFT) $(PRINTF)
	@echo "ðŸ”— Linking $(NAME)..."
	@$(CC) $(CFLAGS) $(OBJS) $(LIBFT) $(PRINTF) -o $(NAME)
	@echo "âœ… Compilation finished successfully."

#build libft only if libft.a is outdated
$(LIBFT):
	@echo "ðŸ“¦ Building libft..."
	@$(MAKE) -s -C $(LIBFT_DIR)

#build ft_printf only if libftprintf.a is outdated
$(PRINTF):
	@echo "ðŸ“¦ Building printf..."
	@$(MAKE) -s -C $(PRINTF_DIR)

clean:
	@echo "ðŸ§¹ Cleaning objects y dependencies..."
	@$(RM) $(OBJDIR) *.d
	@$(MAKE) -s -C $(LIBFT_DIR) clean
	@$(MAKE) -s -C $(PRINTF_DIR) clean

fclean: clean
	@echo "ðŸ—‘ removing executables y libreries..."
	@$(RM) $(NAME)
	@$(MAKE) -s -C $(LIBFT_DIR) fclean
	@$(MAKE) -s -C $(PRINTF_DIR) fclean
	@echo "âœ… Cleanup completed successfully."
re: fclean all

-include $(DEPS) # Include automatically generated dependencies

.PHONY: all clean fclean re